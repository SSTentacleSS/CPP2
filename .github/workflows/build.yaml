name: CMake Build MIIT lib

on: [push]

jobs:
  build:
    strategy:
      max-parallel: 3
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        compiler:
          - gcc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Cache
        id: cache-cpp
        uses: actions/cache@v3
        with:
          path: |
            ~/vcpkg
            ./build/vcpkg_installed
            ${{ env.HOME }}/.cache/vcpkg/archives
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
            ${{ env.LOCALAPPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\vcpkg\archives
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./vcpkg.json')}}-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./vcpkg.json')}}
            ${{ runner.os }}-${{ matrix.compiler }}-
      - name: Setup Cpp
        if: steps.cache-cpp.outputs.cache-hit != 'true'
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: true
          vcpkg: true
          ninja: false
      - name: Create CMake cache if missing
        run: cmake -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE -DBUILD_SHARED_LIBS=TRUE .
      - name: Build MIIT lib
        run: cmake --build . --config Release
      - name: Run tests
        run: ctest
      - name: Archive shared libs
        uses: actions/upload-artifact@v3
        with:
          path: lib/?(lib)miit.{so,dylib,dll}
      - name: Run Demo
        run: demo/${{ runner.os == 'Windows' && 'Release/demo.exe' || 'demo' }}
      - name: Archive demo
        uses: actions/upload-artifact@v3
        with:
          name: demo-${{ runner.os }}
          path: demo/${{ runner.os == 'Windows' && 'Release/demo.exe' || 'demo' }}